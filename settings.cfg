% GLOBAL
  initPop = 108                              # (string) initial population to start MABE (if it's a number then those many default organisms will be loaded. If it's a file name
                                             #    with .plf that population loader file is parsed
  mode = run                                 # (string) mode to run MABE in [run,visualize,analyze]
  outputDirectory = ./                       # (string) where files will be written
  randomSeed = 101                           # (int) seed for random number generator, if -1 random number generator will be seeded randomly
  updates = 30000                            # (int) how long the program will run

% ARCHIVIST
  outputMethod = LODwAP                      # (string) output method, [LODwAP, SSwD, Default]

% ARCHIVIST_DEFAULT
  filePrefix = NONE                          # (string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  popFileColumns = []                        # (string) data to be saved into average file (must be values that can generate an average). If empty, MABE will try to figure it out
  realtimeSequence = :10                     # (string) How often to write to realtime data files. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to
                                             #    updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotDataSequence = :100                # (string) How often to save a realtime snapshot data file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0
                                             #    to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotOrganismsSequence = :1000          # (string) How often to save a realtime snapshot genome file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from
                                             #    0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeMaxFile = 1                           # (bool) Save data to Max file?
  writePopFile = 1                           # (bool) Save data to average file?
  writeSnapshotDataFiles = 0                 # (bool) if true, snapshot data files will be written (with all non genome data for entire population)
  writeSnapshotOrganismsFiles = 0            # (bool) if true, snapshot organisms files will be written (with all organisms for entire population)

% ARCHIVIST_LODWAP
  dataSequence = :100                        # (string) How often to write to data file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to updates on z,
                                             #    x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  filePrefix = NONE                          # (string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  organismsSequence = :1000                  # (string) How often to write genome file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to updates on z,
                                             #    x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  pruneInterval = 100                        # (int) How often to attempt to prune LOD and actually write out to files
  terminateAfter = 10                        # (int) how long to run after updates (to get allow time for coalescence)
  writeDataFile = 1                          # (bool) if true, a data file will be written
  writeOrganismsFile = 1                     # (bool) if true, an organisms file will be written

% ARCHIVIST_SSWD
  cleanupInterval = 100                      # (int) How often to cleanup old checkpoints
  dataDelay = 10                             # (int) when using Snap Shot with Delay output Method, how long is the delay before saving data
  dataSequence = :100                        # (string) when to save a data file (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to updates on z, x:z =
                                             #    from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  filePrefix = NONE                          # (string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  organismsDelay = 10                        # (int) when using Snap Shot with Delay output Method, how long is the delay before saving organisms 
  organismsSequence = :1000                  # (string) when to save an organisms file (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0 to updates on z,
                                             #    x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeDataFiles = 1                         # (bool) if true, data files will be written
  writeOrganismsFiles = 1                    # (bool) if true, genome files will be written

% OPTIMIZER
  optimizer = Simple                         # (string) optimizer to be used, [Simple]

% OPTIMIZER_SIMPLE
  elitismCount = 1                           # (string) number of mutated offspring added to next population for each elite organism (MTree)
  elitismRange = 0                           # (string) number of elite organisms (i.e. if 5, then best 5) (MTree)
  nextPopSize = 0-1                          # (string) size of population after optimization(MTree). -1 indicates use current population size
  numberParents = 1                          # (int) number of parents used to produce offspring
  optimizeValue = DM_AVE[score]              # (string) value to optimize (MTree)
  selectionMethod = Tournament(size=5)       # (string) how are parents selected? options: Roullette(),Tounament(size=VAL)
  selfRate = 0                               # (string) value between 0 and 1, likelyhood that an organism will survive (MTree)
  surviveRate = 0                            # (string) value between 0 and 1, likelyhood that an organism will self (ignored if numberParents = 1) (MTree)

% PARAMETER_FILES
  commentIndent = 45                         # (int) minimum space before comments
  maxLineLength = 180                        # (int) maximum line length

% VISUALIZATION_MODE
  visualizeOrgIDs = [-1]                     # (string) ID of Genome you would like to visualize. -1 last genome file, -2 all genomes in file (world must support group evaluate)
  visualizePopulationFile = genome_1000.csv  # (string) which genome file do you wish to load

