% WORLD
  debug = 0                                  # (bool) run world in debug mode (if available)
  worldType = Coop                           # (string) world to be used, [Xor, Berry, Test, Coop]

% WORLD_BERRY
  allowEatAndMove = 0                        # (bool) if false, and there is an eat output and move output, move outputs will be ignored
                                             #    if true and there is both an eat and move output, eat will happen first, then move.
  alwaysEat = 0                              # (bool) if true, organism will have only two outputs. organism will always attempt eat before moving. If false, there will be a third
                                             #    input for eat
  alwaysStartOnResource = -1                 # (int) all organisms will start on this type of food (-1 = random start locations)
  evalationTime = 400                        # (int) number of world updates per generation
  evaluationsPerGeneration = 1               # (int) how many times should this world be run when evaluating an agent (useful to correct for chance)
  worldHasWall = 1                           # (bool) if map is not provided, does the generated world have a wall around the edge? (maps must define their own walls)
  worldSizeX = 8                             # (int) width of world if no map files are provided (in which case a random world is generated)
  worldSizeY = 8                             # (int) height of world if no map files are provided

% WORLD_BERRY_FOOD
  foodTypes = 2                              # (int) how many different types of food (1,2 or 3)
  initialFoodDistribution = [-1]             # (string) values to use when filling in (auto generated maps)
                                             #      [1,1,2] = 2/3 1, 1/3 2
                                             #      [-1,0,2] = 1/3 random from food types, 1/3 0, 1/3 2
  replace1 = [-1]                            # (string) when food 1 is eaten, what should replace it?
                                             #    replacement is chosen randomly from list
                                             #    elements that appear more then once are more likely to be selected
                                             #    -1 will choose randomly from available food types
  replace2 = [-1]                            # (string) replace rule for food2
  replace3 = [-1]                            # (string) replace rule for food3
  replace4 = [-1]                            # (string) replace rule for food4
  replace5 = [-1]                            # (string) replace rule for food5
  replace6 = [-1]                            # (string) replace rule for food6
  replace7 = [-1]                            # (string) replace rule for food7
  replace8 = [-1]                            # (string) replace rule for food8

% WORLD_BERRY_GEOMETRY
  directions = 8                             # (int) the number of directions organisms can face
                                             #      i.e. 36 = 10 degree turns, 8 = 45 degree turns, etc.
  maxTurn = 0.25                             # (double) harvesters can turn this amount per world update (i.e. if directions = 16 and maxTurn = .25, then 4 turns are allowed per
                                             #    world update). This is implemented by allowing multipile turn (by 360 / directions degrees) actions in a single world update.
  moveDefault = 1.0                          # (double) distance harvester moves when output is move
  moveMin = 0.0                              # (double) min distance harvester moves every update (even if output is not move)
  snapTpGrid = 1                             # (bool) if true, harvester will always move to center of nearest space

% WORLD_BERRY_GROUP
  cloneScoreRule = ALL                       # (string) if clones is > 0 what score rule will be used. ALL = score all clones, BEST = score only best clone, WORST = score only
                                             #    worst clone
  clones = 0                                 # (int) evaluation groups will be padded with this number of clones for each harvester. I.e. if group size is 3 and clones is 1, the
                                             #    actual group size will be 6
  groupSize = 1                              # (int) organisms will be evaluated in groups of this size, the groups will be determined randomly.  
                                             #    If (population size / groupSize) has a remainder, some organisms will be evaluated more then once.
                                             #      -1 indicates to evaluate all organisms at the same time.

% WORLD_BERRY_MAPS
  mapFiles = []                              # (string) list of names of file containing maps (if NONE, random map will be generated) e.g. [World/HarvestXWorld/maps/patch.txt]
  whichMaps = [1/1]                          # (string) list of maps from mapFiles to use to evaluate each harvester, type/name will select named map,
                                             #    * in either position = all,
                                             #    a number = randomly select that number of maps (will fail if there are not enough maps)

% WORLD_BERRY_NAMESPACE
  NameSpace_brain = root::                   # (string) namespace for parameters used to define brain
  NameSpace_group = root::                   # (string) namespace of group to be evaluated

% WORLD_BERRY_SCORE
  hitOtherCost = 0.0                         # (double) cost paid if a move failed because of another harvester being in the way
  hitWallCost = 0.0                          # (double) cost paid if a move failed because of a wall being in the way
  poison0 = 0.0                              # (double) cost for landing on empty
  poison1 = 0.0                              # (double) cost for landing on food1
  poison2 = 0.0                              # (double) cost for landing on food2
  poison3 = 0.0                              # (double) cost for landing on food3
  poison4 = 0.0                              # (double) cost for landing on food4
  poison5 = 0.0                              # (double) cost for landing on food5
  poison6 = 0.0                              # (double) cost for landing on food6
  poison7 = 0.0                              # (double) cost for landing on food7
  poison8 = 0.0                              # (double) cost for landing on food8
  reward1 = 1.0                              # (double) reward for eating food1
  reward2 = 1.0                              # (double) reward for eating food2
  reward3 = 1.0                              # (double) reward for eating food3
  reward4 = 1.0                              # (double) reward for eating food4
  reward5 = 1.0                              # (double) reward for eating food5
  reward6 = 1.0                              # (double) reward for eating food6
  reward7 = 1.0                              # (double) reward for eating food7
  reward8 = 1.0                              # (double) reward for eating food8
  switchCost = 1.4                           # (double) cost paid when switching between food types

% WORLD_BERRY_SENSORS
  downSensorSwitch = 1                       # (bool) can harvesters detect food at their current location?
  perfectSensorSwitch = 1                    # (bool) do harvesters have a perfect sensor? (reqires direction is 4 or 8)
  smellSensorSwitch = 0                      # (bool) do harvesters have a smell sensor?
  visionSensorSwitch = 0                     # (bool) do harvesters have a vision sensor?

% WORLD_BERRY_SENSORS_PERFECT
  perfectSensorDetectsFood = 1               # (bool) can perfect sensor detect food?
  perfectSensorDetectsOther = 0              # (bool) can perfect sensor detect other?
  perfectSensorDetectsWalls = 0              # (bool) can perfect sensor detect walls?
  perfectSensorFile = World/BerryWorld/perfectSensors/smallFront.txt # (string) file which defines perfect sensor?

% WORLD_BERRY_SENSORS_SMELL
  smellFood = 1                              # (bool) can harvesters detect food with their smell sensor?
  smellOther = 0                             # (bool) can harvesters detect other harvesters with their smell sensor?
  smellSensorArcSize = 180                   # (int) how wide is a smell arc (degrees)
  smellSensorDirections = [0,.25,.5,.75]     # (string) what directions can org smell? (if value is < 1, then this value will be multipied by directions)
  smellSensorDistanceMax = 2                 # (int) how far can orgs smell?
  smellWalls = 0                             # (bool) can harvesters detect walls with their smell sensor?
  wallsBlockSmellSensors = 0                 # (bool) if true, objects behind walls can not been smelled (setting to false allows for larger sensors)

% WORLD_BERRY_SENSORS_VISION
  seeFood = 1                                # (bool) can harvesters detect food with their vision sensor?
  seeOther = 0                               # (bool) can harvesters detect other harvesters with their vision sensor?
  seeWalls = 1                               # (bool) can harvesters detect walls with their vision sensor?
  visionSensorArcSize = 5                    # (int) how wide is a vision arc (degrees)
  visionSensorDirections = [-2,0,1]          # (string) what directions can org see? (if value is < 1, then this value will be multipied by directions)
  visionSensorDistanceMax = 6                # (int) how far can orgs see?
  wallsBlockVisonSensors = 0                 # (bool) if true, objects behind walls can not been seen (setting to false allows for larger sensors)

% WORLD_COOP
  buildRes = 10.0                            # (double) Resource needed for building
  buildScore = 0.0                           # (double) Score earned for building
  evaluationsPerGeneration = 1               # (int) Number of times to test each Organism per generation (useful with non-deterministic brains/worlds)
  ffPenalty = -1.0                           # (double) Penalty for friendly fire
  foodReward = 15.0                          # (double) The amount of resource reward for harvesting
  hitPenalty = 3.0                           # (double) Penalty for getting shot
  hitScore = 3.0                             # (double) Score gained for successful agent hits
  mode = 0                                   # (int) 0 = 3 copies of one brain for each agent, 1 = one brain for each agent, 2 = specialized group evolution
  moveReward = 0.001                         # (double) The reward for moving
  naPenalty = 0.01                           # (double) No action penalty
  numberOfBackIntegers = 3                   # (int) number of integers the brain should remember (just in case)
  numberOfOutputs = 7                        # (int) number of outputs in this world
  resScore = 0.01                            # (double) Score gained for harvesting 
  shootRes = 4.0                             # (double) Resource needed for shooting
  shootScore = 0.0                           # (double) Score earned for shooting
  structDefend = 15.0                        # (double) Reward for successfully defending the bullets
  structHitPenalty = 0.0                     # (double) Penalty for shooting at own structures
  structHitScore = 1.0                       # (double) Score gained for successfully hitting structures
  switchPenalty = 0.0                        # (double) Penalty of task switching
  winReward = 0.0                            # (double) Reward for winning the game (only use this if you know what you're doing)

% WORLD_COOP_NAMES
  brainNameSpace = root::                    # (string) namespace for parameters used to define brain
  groupNameSpace = root::                    # (string) namespace of group to be evaluated

% WORLD_TEST
  evaluationsPerGeneration = 1               # (int) Number of times to test each Genome per generation (useful with non-deterministic brains)
  mode = 0                                   # (int) 0 = bit outputs before adding, 1 = add outputs
  numberOfOutputs = 10                       # (int) number of outputs in this world

% WORLD_TEST_NAMES
  brainNameSpace = root::                    # (string) namespace for parameters used to define brain
  groupNameSpace = root::                    # (string) namespace of group to be evaluated

% WORLD_XOR
  brainUpdates = 10                          # (int) Number of times the brain gets to receive input and perform 1 brain update, before the brain's output is queried.
  evaluationsPerGeneration = 1               # (int) Number of times to test each Genome per generation (useful with non-deterministic brains)

% WORLD_XOR_NAMES
  brainName = root::                         # (string) name of brains used to control organisms
                                             #    root = use empty name space
                                             #    GROUP:: = use group name space
                                             #    "name" = use "name" namespace at root level
                                             #    Group::"name" = use GROUP::"name" name space
  groupName = root::                         # (string) name of group to be evaluated

